/*this is the code that you are looking for kindly signed OScar*/
#include <EEPROM.h>
#include "EEPROMAnything.h"
#include <MenuBackend.h>	//MenuBackend library - copyright by Alexander Brevig< you have to dowload this from website, and add a few lines of code to use it correctly.
#include <LiquidCrystal.h>  //this library is so that you can control the LCD
#include "DHT.h"
#define DHTPIN 30
#define DHTTYPE DHT11
const int buttonPinLeft = 6;  	// pin for the Up button allows to you to give meaningful names to pysical pins or items on the board or your componets
const int buttonPinRight = 7;	// pin for the Down button, these are PWM pins but they can be set to strictly digital pins
const int buttonPinEsc = 8; 	// pin for the Esc button
const int buttonPinEnter = 9;   // pin for the Enter button

int lastButtonPushed = 0;  	//////////////////////////////////

int lastButtonEnterState = LOW;   // the previous reading from the Enter input pin
int lastButtonEscState = LOW;   // the previous reading from the Esc input pin
int lastButtonLeftState = LOW;   // the previous reading from the Left input pin
int lastButtonRightState = LOW;   // the previous reading from the Right input pin


long lastEnterDebounceTime = 0;  // the last time the output pin was toggled
long lastEscDebounceTime = 0;  // the last time the output pin was toggled
long lastLeftDebounceTime = 0;  // the last time the output pin was toggled
long lastRightDebounceTime = 0;  // the last time the output pin was toggled
long debounceDelay = 500;	// the debounce time


LiquidCrystal lcd(12, 11, 5, 4, 3, 2);



//Menu variables
MenuBackend menu = MenuBackend(menuUsed,menuChanged);
//initialize menuitems
	MenuItem menu1Item1 = MenuItem("Edit Machine");
  	MenuItem menuItem1SubItem1 = MenuItem("Channel 1");
    	MenuItem menuItem1SubItem1SubItem1 = MenuItem("On Time");
    	MenuItem menuItem1SubItem1SubItem2 = MenuItem("Off Time");
    	MenuItem menuItem1SubItem1SubItem3 = MenuItem("Start State") ;
  	MenuItem menuItem1SubItem2 = MenuItem("Channel 2");
  	MenuItem menuItem1SubItem3 = MenuItem("Channel 3");
  	MenuItem menuItem1SubItem4 = MenuItem("Channel 4");
   	MenuItem menuItem1SubItem5 = MenuItem("Save Settings");
	MenuItem menu1Item2 = MenuItem("View Machine"); // print out the values in the matrix, coresponding to the relays.
  	MenuItem menuItem2SubItem1 = MenuItem("Chan 1 values"); //
  	MenuItem menuItem2SubItem2 = MenuItem("Chan 2 values");  //
  	MenuItem menuItem3SubItem3 = MenuItem("Chan 3 Values");
  	MenuItem menuItem3SubItem4 = MenuItem("Chan 4 Values");
	MenuItem menu1Item3 = MenuItem("Edit Temp");// populate the list of machines and then eneter it

//Menu variables
long Matrix[][5] = {{1, 0, 3, 1, 0}, //initialize the Matrix to be used
                	{3, 2, 1, 2, 0}, //the first 4x4 matrix contains the relay values
                	{4, 5, 0, 0, 0}, //the left most column is for storing any variables
                	{0, 0, 0, 1, 0}, //top right is Temp limit
};
unsigned long PREV[5];
int MENU = 0;
int ROW;  //index vlaue in the matirx for the row
int COL;  //index value for the matrix for the coulumn
long Val = -1;  // the value to be save in the matrix
DHT dht(DHTPIN, DHTTYPE);


//End the relay Code
void setup()
{
	pinMode(22, OUTPUT);
  pinMode(24, OUTPUT);
  pinMode(26, OUTPUT);
  pinMode(28, OUTPUT);
 
  pinMode(buttonPinLeft, INPUT);   //Declaers the status of the pins from variables set earlier
  pinMode(buttonPinRight, INPUT);
  pinMode(buttonPinEnter, INPUT);
  pinMode(buttonPinEsc, INPUT);
 
  lcd.begin(16, 2); 	//initilizes the LCD matrix nothing to see here
  dht.begin();

  //configure menu
  menu.getRoot().add(menu1Item1);
  menu1Item1.addRight(menu1Item2).addRight(menu1Item3);
  menu1Item1.add(menuItem1SubItem1).addRight(menuItem1SubItem2).addRight(menuItem1SubItem3).addRight(menuItem1SubItem4).addRight(menuItem1SubItem5);
  menuItem1SubItem1.add(menuItem1SubItem1SubItem1).addRight(menuItem1SubItem1SubItem2).addRight(menuItem1SubItem1SubItem3);
  menuItem1SubItem2.add(menuItem1SubItem1SubItem1).addRight(menuItem1SubItem1SubItem2).addRight(menuItem1SubItem1SubItem3);
  menuItem1SubItem3.add(menuItem1SubItem1SubItem1).addRight(menuItem1SubItem1SubItem2).addRight(menuItem1SubItem1SubItem3);
  menuItem1SubItem4.add(menuItem1SubItem1SubItem1).addRight(menuItem1SubItem1SubItem2).addRight(menuItem1SubItem1SubItem3);
  menu1Item2.add(menuItem2SubItem1).addRight(menuItem2SubItem2).addRight(menuItem3SubItem3).addRight(menuItem3SubItem4);
 HOME();

 
  lcd.setCursor(0,0);  
  lcd.print("www.botnc.com");
  Serial.begin(9600);
  EEPROM_readAnything(0, Matrix);
  if (Matrix[0][0] != 22 || Matrix[1][0] != 24) {
	Matrix[0][0] = 22;
	Matrix[1][0] = 24;
	Matrix[2][0] = 26;
	Matrix[3][0] = 28;
	EEPROM_writeAnything(0, Matrix);
  }
  for (int w = 0; w < 4; ++w) {
	if (Matrix[w][3] == 0 || Matrix[w][3] == 2){
  	digitalWrite(Matrix[w][0], LOW);
	}else if (Matrix[w][3] == 1){
  	digitalWrite(Matrix[w][0], HIGH);
	}
  }
  ////////////************//////////////////
}  // setup()...


void loop()
{

  readButtons();  //I splitted button reading and navigation in two procedures because
  navigateMenus();  //in some situations I want to use the button for other purpose (eg. to change some settings)
  Update();
  TPHU();   	 
} //loop()...


void menuChanged(MenuChangeEvent changed){
 
  MenuItem newMenuItem=changed.to; //get the destination menu
 
  lcd.setCursor(0,1); //set the start position for lcd printing to the second row
 
  if(newMenuItem.getName()==menu.getRoot()){
  	lcd.print("Main Menu   	");
  }else if(newMenuItem.getName()=="Edit Machine"){
  	lcd.print("Edit Machine	");
  	MENU = 1;
  }else if(newMenuItem.getName()=="Channel 1"){
  	lcd.print("Channel 1   	");
  	ROW = 0;
  }else if(newMenuItem.getName()=="Channel 2"){
  	lcd.print("Channel 2   	");
  	ROW = 1;
  }else if(newMenuItem.getName()=="Channel 3"){
  	lcd.print("Channel 3   	");
  	ROW = 2;
  }else if(newMenuItem.getName()=="Channel 4"){
  	lcd.print("Channel 4   	");
  	ROW = 3;
  }else if(newMenuItem.getName()=="View Machine"){
  	lcd.print("View Machine	");
  	MENU = 2;
  }else if(newMenuItem.getName()=="Chan 1 values"){
  	lcd.print("Chan 1 Values   ");
  	ROW = 0;
  }else if(newMenuItem.getName()=="Chan 2 values"){
  	lcd.print("Chan 2 Values   ");
  	ROW = 1;
  }else if(newMenuItem.getName()=="Chan 3 Values"){
  	lcd.print("Chan 3 Values   ");
  	ROW = 2;
  }else if(newMenuItem.getName()=="Chan 4 Values"){
  	lcd.print("Chan 4 Values   ");
  	ROW = 3;
  }else if(newMenuItem.getName()=="Edit Temp"){
  	lcd.print("Edit Temp   	");
  	MENU = 3;
  }else if(newMenuItem.getName()=="On Time"){
  	lcd.print("On Time     	");
  	COL = 1;
  }else if(newMenuItem.getName()=="Start State"){
  	lcd.print("Start State 	");
  	COL = 3;
  }else if(newMenuItem.getName()=="Off Time"){
  	lcd.print("Off Time    	");
  	COL = 2;
  }else if(newMenuItem.getName()=="Save Settings"){
  	lcd.print("Save Settings   ");
  	MENU = 4;
  }
}

void menuUsed(MenuUseEvent used){
  //Some Code for the realys


  //End that code for the relays

  //lcd.print(used.item.getName());

  //menu.toRoot();  //CommentOut because we dont want to go to root get.
  if ( MENU == 1){
  switch (COL) {
	case 1:
  	Serial.println("set ontime");
  	SetMills();
  	SaveToMax();
  	break;
	case 2:
  	Serial.println("set offtime");
  	SetMills();
  	SaveToMax();
  	break;
	case 3:
  	Serial.println("set StartState");
  	SetStartState();
  	SaveToMax();
  	break;
	default:
 	HOME();
  	break;
  }
  }else if (MENU == 2){
  delay(500);
  ReadValues(ROW);
  HOME();
  }
  else if (MENU == 3) {
	SetTempLim();
 	SaveToMax();
 	HOME();
  }
  else if (MENU == 4 ) {
    	EEPROM_writeAnything(0, Matrix);
    	lcd.clear();
    	lcd.print("Settings Saved  ");
    	delay(2000);
    	HOME();
  }  
}


void  readButtons(){  //read buttons status
  int reading;
  int buttonEnterState=LOW;         	// the current reading from the Enter input pin
  int buttonEscState=LOW;         	// the current reading from the input pin
  int buttonLeftState=LOW;         	// the current reading from the input pin
  int buttonRightState=LOW;         	// the current reading from the input pin

  //Enter button
              	// read the state of the switch into a local variable:
              	reading = digitalRead(buttonPinEnter);

              	// check to see if you just pressed the enter button
              	// (i.e. the input went from LOW to HIGH),  and you've waited
              	// long enough since the last press to ignore any noise:  
           	 
              	// If the switch changed, due to noise or pressing:
              	if (reading != lastButtonEnterState) {
                	// reset the debouncing timer
                	lastEnterDebounceTime = millis();
              	}
             	 
              	if ((millis() - lastEnterDebounceTime) > debounceDelay) {
                	// whatever the reading is at, it's been there for longer
                	// than the debounce delay, so take it as the actual current state:
                	buttonEnterState=reading;
                	lastEnterDebounceTime=millis();
              	}
             	 
              	// save the reading.  Next time through the loop,
              	// it'll be the lastButtonState:
              	lastButtonEnterState = reading;
             	 

	//Esc button          	 
              	// read the state of the switch into a local variable:
              	reading = digitalRead(buttonPinEsc);

              	// check to see if you just pressed the Down button
              	// (i.e. the input went from LOW to HIGH),  and you've waited
              	// long enough since the last press to ignore any noise:  
           	 
              	// If the switch changed, due to noise or pressing:
              	if (reading != lastButtonEscState) {
                	// reset the debouncing timer
                	lastEscDebounceTime = millis();
              	}
             	 
              	if ((millis() - lastEscDebounceTime) > debounceDelay) {
                	// whatever the reading is at, it's been there for longer
                	// than the debounce delay, so take it as the actual current state:
                	buttonEscState = reading;
                	lastEscDebounceTime=millis();
              	}
             	 
              	// save the reading.  Next time through the loop,
              	// it'll be the lastButtonState:
              	lastButtonEscState = reading;
             	 
                	 
   //Down button          	 
              	// read the state of the switch into a local variable:
              	reading = digitalRead(buttonPinRight);

              	// check to see if you just pressed the Down button
              	// (i.e. the input went from LOW to HIGH),  and you've waited
              	// long enough since the last press to ignore any noise:  
           	 
              	// If the switch changed, due to noise or pressing:
              	if (reading != lastButtonRightState) {
                	// reset the debouncing timer
                	lastRightDebounceTime = millis();
              	}
             	 
              	if ((millis() - lastRightDebounceTime) > debounceDelay) {
                	// whatever the reading is at, it's been there for longer
                	// than the debounce delay, so take it as the actual current state:
                	buttonRightState = reading;
               	lastRightDebounceTime =millis();
              	}
             	 
              	// save the reading.  Next time through the loop,
              	// it'll be the lastButtonState:
              	lastButtonRightState = reading;             	 
             	 
             	 
	//Up button          	 
              	// read the state of the switch into a local variable:
              	reading = digitalRead(buttonPinLeft);

              	// check to see if you just pressed the Down button
              	// (i.e. the input went from LOW to HIGH),  and you've waited
              	// long enough since the last press to ignore any noise:  
           	 
              	// If the switch changed, due to noise or pressing:
              	if (reading != lastButtonLeftState) {
                	// reset the debouncing timer
                	lastLeftDebounceTime = millis();
              	}
             	 
              	if ((millis() - lastLeftDebounceTime) > debounceDelay) {
                	// whatever the reading is at, it's been there for longer
                	// than the debounce delay, so take it as the actual current state:
                	buttonLeftState = reading;
                	lastLeftDebounceTime=millis();;
              	}
             	 
              	// save the reading.  Next time through the loop,
              	// it'll be the lastButtonState:
              	lastButtonLeftState = reading;  

              	//records which button has been pressed
              	if (buttonEnterState==HIGH){
                	lastButtonPushed=buttonPinEnter;

              	}else if(buttonEscState==HIGH){
                	lastButtonPushed=buttonPinEsc;

              	}else if(buttonRightState==HIGH){
                	lastButtonPushed=buttonPinRight;

              	}else if(buttonLeftState==HIGH){
                	lastButtonPushed=buttonPinLeft;

              	}else{
                	lastButtonPushed=0;
              	}             	 
}

void navigateMenus() {

   MenuItem currentMenu=menu.getCurrent();

 
 
  switch (lastButtonPushed){
	case buttonPinEnter:
  	if(!(currentMenu.moveDown())){  //if the current menu has a child and has been pressed enter then menu navigate to item below
    	menu.use();
  	}else{  //otherwise, if menu has no child and has been pressed enter the current menu is used
    	menu.moveDown();
   	}
  	break;
	case buttonPinEsc:
 	HOME();  //back to main
  	break;
	case buttonPinRight:
  	menu.moveRight();
  	break; 	 
	case buttonPinLeft:
  	menu.moveLeft();
  	break; 	 
  }
 
  lastButtonPushed=0; //reset the lastButtonPushed variable
}
void SetStartState() {
  MENU = 0;
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Set start state ");
  int x = 0;
  lcd.setCursor(0,1);
  lcd.print(x);
  while(Val == -1) {
	readButtons();
	if ( x == -1 || x ==3){
   	x = 0;
	}
	lcd.setCursor(0,1);
	switch(x) {
  	case 0:
  	lcd.print("start off   	");
  	break;
  	case 1:
  	lcd.print("start on    	");
  	break;
  	case 2:
  	lcd.print("disable     	");
  	break;
  	default:
  	break;
	}
	switch(lastButtonPushed){
  	case buttonPinEnter:
  	Val = x;
  	HOME();                     	/////////////////////////
  	break;
 	 
  	case buttonPinEsc:
 	HOME();                       	/////////////////////////
  	break;
 	 
  	case buttonPinRight:
    	--x;   	 
    	break;
   	 
  	case buttonPinLeft:
    	++x;
    	break;
	}
  }
}

void SetMills() {
  MENU = 0;
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Set hours   ");
  lcd.setCursor(0,1);
  int x = 0;
  int h = -1;
  int m = -1;
  lcd.print(x);
  while(h == -1 || m == -1) {
	readButtons();
	if (x == -1 || x == 60) {
  	x = 0;
	}
	lcd.setCursor(0,1);
	lcd.print(x);
	switch(lastButtonPushed){
  	case buttonPinEnter:
  	if (h == -1) {
    	h = x;
    	lcd.setCursor(0,0);
    	lcd.print("set minutes 	");
  	}else {
    	m = x;
  	}
  	break;
 	 
  	case buttonPinEsc:
 	HOME();                     	/////////////////////////
  	break;
 	 
  	case buttonPinRight:
  	--x;
  	break;
 	 
  	case buttonPinLeft:
  	++x;
  	break;
	}
  }
  Val = ConvertToMills(h,m);
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("mills");
  lcd.setCursor(0,1);
  lcd.print(Val);
  delay(900);
 HOME();                           	/////////////////////////
 
}
long ConvertToMills(int H, int M) {
long x = (H * 3600000) + (M * 60000);
  return x;  
}
void SaveToMax() {
  Matrix[ROW][COL] = Val;
  ROW = -1;
  COL = -1;
  Val = -1;
}
void HOME(){
 menu.toRoot();
 for (int i = 0; i < 4; ++i) {
  Serial.println(" ");
  for (int z = 0; z < 4; ++z) {
	Serial.print(Matrix[i][z]);Serial.print(", ");
  }
 }
 Serial.println(Matrix[0][4]);
 lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Botnc.com   	");
  lcd.setCursor(0,1);
  lcd.print("Main Menu   	");
}

void ReadValues(int R){
  for (int i = 0; i < 4; ++i) {
   long t = Matrix[R][i];
   if (i==1){
	int h = (t - (t%3600000))/3600000;
	int m = (t%3600000)/60000;
	Serial.println(t);
	Serial.println(h);
	Serial.println(m);
	lcd.clear();
	lcd.setCursor(0,0);
	lcd.print("On for this Long");
	lcd.setCursor(0,1);
	lcd.print("Hhr:");
	lcd.setCursor(4,1);
	lcd.print(h);
	lcd.setCursor(9,1);
	lcd.print("Min:");
	lcd.setCursor(13,1);
	lcd.print(m);
	delay(10000);
   }else if (i==2){
	int h = (t - (t%3600000))/3600000;
	int m = (t%3600000)/60000;
	lcd.clear();
	lcd.setCursor(0,0);
	lcd.print("off 4 this Long ");
	lcd.setCursor(0,1);
	lcd.print("Hhr:");
	lcd.setCursor(4,1);
	lcd.print(h);
	lcd.setCursor(9,1);
	lcd.print("Min:");
	lcd.setCursor(13,1);
	lcd.print(m);
	delay(10000);
   }else if (i==3){
	lcd.clear();
	lcd.setCursor(0,0);
	lcd.print("Outlet start out");
	lcd.setCursor(0,1);
	switch(t){
  	case 0:
  	lcd.print("OFF         	");
  	break;
  	case 1:
  	lcd.print("ON          	");
  	break;
  	case 2:
  	lcd.print("DISABLED    	");
  	break;
  	default:
  	break;
	}}else if (i==0){
	lcd.setCursor(0,1);
	lcd.print("outlet: ");
	lcd.setCursor(8,1);
	switch(t){
  	case 22:
  	lcd.print("One 	");
  	break;
  	case 24:
  	lcd.print("Two 	");
  	break;
  	case 26:
  	lcd.print("Three   ");
  	break;
  	case 28:
  	lcd.print("Four   ");
  	break;
  	default:
  	break;
	}
	delay(10000);
   }
  }
}
void SetTempLim() {
  lcd.clear();
  lcd.print("Set temp limit  ");
  lcd.setCursor(0,1);
  int r;
  while( Val == -1) {
	readButtons();
	if (r <= 50 || r >= 100) {
  	r = 80;
	}
	lcd.setCursor(0,1);
	lcd.print(r);
	switch(lastButtonPushed){
  	case buttonPinEnter:
	Val = r;
	ROW = 0;
	COL = 4;
  	break;
 	 
  	case buttonPinEsc:
 	HOME();                     	/////////////////////////
  	break;
 	 
  	case buttonPinRight:
  	--r;
  	break;
 	 
  	case buttonPinLeft:
  	++r;
  	break;
	}
  }  
}
void Update() {
  unsigned long CURR = millis();
 
  for (int u = 0; u < 4; ++u) {
	if (CURR < PREV[u]) {
	PREV[u] = 0;
  }
	long PIN = Matrix[u][0];
	if( Matrix[u][3]== 2) {
  	continue;
	} 	 
	if (digitalRead(PIN) == HIGH && abs(CURR - PREV[u])>= Matrix[u][1])  {
  	digitalWrite(PIN, LOW);
  	PREV[u]= CURR;
	}
	else if (digitalRead(PIN) == LOW && abs(CURR - PREV[u])>= Matrix[u][2])  {
  	digitalWrite(PIN, HIGH);
  	PREV[u]= CURR;
	}   
  }
}
void TPHU() {
  if (menu.getCurrent() == menu.getRoot()) {
	if (abs( millis() - PREV[4])  >= 30000) {
 	float f= dht.readTemperature(true);
  	float h = dht.readHumidity();
  	lcd.setCursor(0,1);
  	lcd.print("Tem:");
  	lcd.setCursor(4,1);
  	lcd.print(f);
  	lcd.setCursor(8,1);	 
  	lcd.print("Hum:");
  	lcd.setCursor(12,1);
  	lcd.print(h);
  	PREV[4] = millis();
	}
  }else {
	PREV[4] = millis();
  }
}


